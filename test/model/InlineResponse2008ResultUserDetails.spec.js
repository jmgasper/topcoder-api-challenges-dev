/*
 * ap-challenge-microservice
 * Services that provide access and interaction with all sorts of challenges, including design, dev, single round matches, and marathon matches. 
 *
 * OpenAPI spec version: 1.0.5
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApChallengeMicroservice);
  }
}(this, function(expect, ApChallengeMicroservice) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InlineResponse2008ResultUserDetails', function() {
      beforeEach(function() {
        instance = new ApChallengeMicroservice.InlineResponse2008ResultUserDetails();
      });

      it('should create an instance of InlineResponse2008ResultUserDetails', function() {
        // TODO: update the code to test InlineResponse2008ResultUserDetails
        expect(instance).to.be.a(ApChallengeMicroservice.InlineResponse2008ResultUserDetails);
      });

      it('should have the property roles (base name: "roles")', function() {
        // TODO: update the code to test the property roles
        expect(instance).to.have.property('roles');
        // expect(instance.roles).to.be(expectedValueLiteral);
      });

      it('should have the property hasUserSubmittedForReview (base name: "hasUserSubmittedForReview")', function() {
        // TODO: update the code to test the property hasUserSubmittedForReview
        expect(instance).to.have.property('hasUserSubmittedForReview');
        // expect(instance.hasUserSubmittedForReview).to.be(expectedValueLiteral);
      });

      it('should have the property submissionReviewScore (base name: "submissionReviewScore")', function() {
        // TODO: update the code to test the property submissionReviewScore
        expect(instance).to.have.property('submissionReviewScore');
        // expect(instance.submissionReviewScore).to.be(expectedValueLiteral);
      });

      it('should have the property winningPlacements (base name: "winningPlacements")', function() {
        // TODO: update the code to test the property winningPlacements
        expect(instance).to.have.property('winningPlacements');
        // expect(instance.winningPlacements).to.be(expectedValueLiteral);
      });

      it('should have the property submissions (base name: "submissions")', function() {
        // TODO: update the code to test the property submissions
        expect(instance).to.have.property('submissions');
        // expect(instance.submissions).to.be(expectedValueLiteral);
      });

    });
  });

}));
