/*
 * ap-challenge-microservice
 * Services that provide access and interaction with all sorts of challenges, including design, dev, single round matches, and marathon matches. 
 *
 * OpenAPI spec version: 1.0.5
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApChallengeMicroservice);
  }
}(this, function(expect, ApChallengeMicroservice) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InlineResponse2008ResultContent', function() {
      beforeEach(function() {
        instance = new ApChallengeMicroservice.InlineResponse2008ResultContent();
      });

      it('should create an instance of InlineResponse2008ResultContent', function() {
        // TODO: update the code to test InlineResponse2008ResultContent
        expect(instance).to.be.a(ApChallengeMicroservice.InlineResponse2008ResultContent);
      });

      it('should have the property updatedAt (base name: "updatedAt")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "createdAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property createdBy (base name: "createdBy")', function() {
        // TODO: update the code to test the property createdBy
        expect(instance).to.have.property('createdBy');
        // expect(instance.createdBy).to.be(expectedValueLiteral);
      });

      it('should have the property updatedBy (base name: "updatedBy")', function() {
        // TODO: update the code to test the property updatedBy
        expect(instance).to.have.property('updatedBy');
        // expect(instance.updatedBy).to.be(expectedValueLiteral);
      });

      it('should have the property technologies (base name: "technologies")', function() {
        // TODO: update the code to test the property technologies
        expect(instance).to.have.property('technologies');
        // expect(instance.technologies).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property track (base name: "track")', function() {
        // TODO: update the code to test the property track
        expect(instance).to.have.property('track');
        // expect(instance.track).to.be(expectedValueLiteral);
      });

      it('should have the property subTrack (base name: "subTrack")', function() {
        // TODO: update the code to test the property subTrack
        expect(instance).to.have.property('subTrack');
        // expect(instance.subTrack).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property reviewType (base name: "reviewType")', function() {
        // TODO: update the code to test the property reviewType
        expect(instance).to.have.property('reviewType');
        // expect(instance.reviewType).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property forumId (base name: "forumId")', function() {
        // TODO: update the code to test the property forumId
        expect(instance).to.have.property('forumId');
        // expect(instance.forumId).to.be(expectedValueLiteral);
      });

      it('should have the property numSubmissions (base name: "numSubmissions")', function() {
        // TODO: update the code to test the property numSubmissions
        expect(instance).to.have.property('numSubmissions');
        // expect(instance.numSubmissions).to.be(expectedValueLiteral);
      });

      it('should have the property numRegistrants (base name: "numRegistrants")', function() {
        // TODO: update the code to test the property numRegistrants
        expect(instance).to.have.property('numRegistrants');
        // expect(instance.numRegistrants).to.be(expectedValueLiteral);
      });

      it('should have the property registrationStartDate (base name: "registrationStartDate")', function() {
        // TODO: update the code to test the property registrationStartDate
        expect(instance).to.have.property('registrationStartDate');
        // expect(instance.registrationStartDate).to.be(expectedValueLiteral);
      });

      it('should have the property registrationEndDate (base name: "registrationEndDate")', function() {
        // TODO: update the code to test the property registrationEndDate
        expect(instance).to.have.property('registrationEndDate');
        // expect(instance.registrationEndDate).to.be(expectedValueLiteral);
      });

      it('should have the property checkpointSubmissionEndDate (base name: "checkpointSubmissionEndDate")', function() {
        // TODO: update the code to test the property checkpointSubmissionEndDate
        expect(instance).to.have.property('checkpointSubmissionEndDate');
        // expect(instance.checkpointSubmissionEndDate).to.be(expectedValueLiteral);
      });

      it('should have the property submissionEndDate (base name: "submissionEndDate")', function() {
        // TODO: update the code to test the property submissionEndDate
        expect(instance).to.have.property('submissionEndDate');
        // expect(instance.submissionEndDate).to.be(expectedValueLiteral);
      });

      it('should have the property platforms (base name: "platforms")', function() {
        // TODO: update the code to test the property platforms
        expect(instance).to.have.property('platforms');
        // expect(instance.platforms).to.be(expectedValueLiteral);
      });

      it('should have the property numberOfCheckpointPrizes (base name: "numberOfCheckpointPrizes")', function() {
        // TODO: update the code to test the property numberOfCheckpointPrizes
        expect(instance).to.have.property('numberOfCheckpointPrizes');
        // expect(instance.numberOfCheckpointPrizes).to.be(expectedValueLiteral);
      });

      it('should have the property totalCheckpointPrize (base name: "totalCheckpointPrize")', function() {
        // TODO: update the code to test the property totalCheckpointPrize
        expect(instance).to.have.property('totalCheckpointPrize');
        // expect(instance.totalCheckpointPrize).to.be(expectedValueLiteral);
      });

      it('should have the property totalPrize (base name: "totalPrize")', function() {
        // TODO: update the code to test the property totalPrize
        expect(instance).to.have.property('totalPrize');
        // expect(instance.totalPrize).to.be(expectedValueLiteral);
      });

      it('should have the property isPrivate (base name: "isPrivate")', function() {
        // TODO: update the code to test the property isPrivate
        expect(instance).to.have.property('isPrivate');
        // expect(instance.isPrivate).to.be(expectedValueLiteral);
      });

      it('should have the property upcomingPhase (base name: "upcomingPhase")', function() {
        // TODO: update the code to test the property upcomingPhase
        expect(instance).to.have.property('upcomingPhase');
        // expect(instance.upcomingPhase).to.be(expectedValueLiteral);
      });

      it('should have the property projectId (base name: "projectId")', function() {
        // TODO: update the code to test the property projectId
        expect(instance).to.have.property('projectId');
        // expect(instance.projectId).to.be(expectedValueLiteral);
      });

      it('should have the property projectName (base name: "projectName")', function() {
        // TODO: update the code to test the property projectName
        expect(instance).to.have.property('projectName');
        // expect(instance.projectName).to.be(expectedValueLiteral);
      });

      it('should have the property currentPhases (base name: "currentPhases")', function() {
        // TODO: update the code to test the property currentPhases
        expect(instance).to.have.property('currentPhases');
        // expect(instance.currentPhases).to.be(expectedValueLiteral);
      });

      it('should have the property allPhases (base name: "allPhases")', function() {
        // TODO: update the code to test the property allPhases
        expect(instance).to.have.property('allPhases');
        // expect(instance.allPhases).to.be(expectedValueLiteral);
      });

      it('should have the property prize (base name: "prize")', function() {
        // TODO: update the code to test the property prize
        expect(instance).to.have.property('prize');
        // expect(instance.prize).to.be(expectedValueLiteral);
      });

      it('should have the property events (base name: "events")', function() {
        // TODO: update the code to test the property events
        expect(instance).to.have.property('events');
        // expect(instance.events).to.be(expectedValueLiteral);
      });

      it('should have the property drPoints (base name: "drPoints")', function() {
        // TODO: update the code to test the property drPoints
        expect(instance).to.have.property('drPoints');
        // expect(instance.drPoints).to.be(expectedValueLiteral);
      });

      it('should have the property reliabilityBonus (base name: "reliabilityBonus")', function() {
        // TODO: update the code to test the property reliabilityBonus
        expect(instance).to.have.property('reliabilityBonus');
        // expect(instance.reliabilityBonus).to.be(expectedValueLiteral);
      });

      it('should have the property userId (base name: "userId")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

      it('should have the property handle (base name: "handle")', function() {
        // TODO: update the code to test the property handle
        expect(instance).to.have.property('handle');
        // expect(instance.handle).to.be(expectedValueLiteral);
      });

      it('should have the property isTask (base name: "isTask")', function() {
        // TODO: update the code to test the property isTask
        expect(instance).to.have.property('isTask');
        // expect(instance.isTask).to.be(expectedValueLiteral);
      });

      it('should have the property environment (base name: "environment")', function() {
        // TODO: update the code to test the property environment
        expect(instance).to.have.property('environment');
        // expect(instance.environment).to.be(expectedValueLiteral);
      });

      it('should have the property codeRepo (base name: "codeRepo")', function() {
        // TODO: update the code to test the property codeRepo
        expect(instance).to.have.property('codeRepo');
        // expect(instance.codeRepo).to.be(expectedValueLiteral);
      });

      it('should have the property groupIds (base name: "groupIds")', function() {
        // TODO: update the code to test the property groupIds
        expect(instance).to.have.property('groupIds');
        // expect(instance.groupIds).to.be(expectedValueLiteral);
      });

      it('should have the property userDetails (base name: "userDetails")', function() {
        // TODO: update the code to test the property userDetails
        expect(instance).to.have.property('userDetails');
        // expect(instance.userDetails).to.be(expectedValueLiteral);
      });

    });
  });

}));
