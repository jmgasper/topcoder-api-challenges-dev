/*
 * ap-challenge-microservice
 * Services that provide access and interaction with all sorts of challenges, including design, dev, single round matches, and marathon matches. 
 *
 * OpenAPI spec version: 1.0.5
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApChallengeMicroservice);
  }
}(this, function(expect, ApChallengeMicroservice) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InlineResponse20011ResultContentSubmissions', function() {
      beforeEach(function() {
        instance = new ApChallengeMicroservice.InlineResponse20011ResultContentSubmissions();
      });

      it('should create an instance of InlineResponse20011ResultContentSubmissions', function() {
        // TODO: update the code to test InlineResponse20011ResultContentSubmissions
        expect(instance).to.be.a(ApChallengeMicroservice.InlineResponse20011ResultContentSubmissions);
      });

      it('should have the property placement (base name: "placement")', function() {
        // TODO: update the code to test the property placement
        expect(instance).to.have.property('placement');
        // expect(instance.placement).to.be(expectedValueLiteral);
      });

      it('should have the property screeningScore (base name: "screeningScore")', function() {
        // TODO: update the code to test the property screeningScore
        expect(instance).to.have.property('screeningScore');
        // expect(instance.screeningScore).to.be(expectedValueLiteral);
      });

      it('should have the property initialScore (base name: "initialScore")', function() {
        // TODO: update the code to test the property initialScore
        expect(instance).to.have.property('initialScore');
        // expect(instance.initialScore).to.be(expectedValueLiteral);
      });

      it('should have the property finalScore (base name: "finalScore")', function() {
        // TODO: update the code to test the property finalScore
        expect(instance).to.have.property('finalScore');
        // expect(instance.finalScore).to.be(expectedValueLiteral);
      });

      it('should have the property points (base name: "points")', function() {
        // TODO: update the code to test the property points
        expect(instance).to.have.property('points');
        // expect(instance.points).to.be(expectedValueLiteral);
      });

      it('should have the property submissionStatus (base name: "submissionStatus")', function() {
        // TODO: update the code to test the property submissionStatus
        expect(instance).to.have.property('submissionStatus');
        // expect(instance.submissionStatus).to.be(expectedValueLiteral);
      });

      it('should have the property submissionId (base name: "submissionId")', function() {
        // TODO: update the code to test the property submissionId
        expect(instance).to.have.property('submissionId');
        // expect(instance.submissionId).to.be(expectedValueLiteral);
      });

      it('should have the property submissionTime (base name: "submissionTime")', function() {
        // TODO: update the code to test the property submissionTime
        expect(instance).to.have.property('submissionTime');
        // expect(instance.submissionTime).to.be(expectedValueLiteral);
      });

    });
  });

}));
