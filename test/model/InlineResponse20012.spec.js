/*
 * ap-challenge-microservice
 * Services that provide access and interaction with all sorts of challenges, including design, dev, single round matches, and marathon matches. 
 *
 * OpenAPI spec version: 1.0.5
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApChallengeMicroservice);
  }
}(this, function(expect, ApChallengeMicroservice) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InlineResponse20012', function() {
      beforeEach(function() {
        instance = new ApChallengeMicroservice.InlineResponse20012();
      });

      it('should create an instance of InlineResponse20012', function() {
        // TODO: update the code to test InlineResponse20012
        expect(instance).to.be.a(ApChallengeMicroservice.InlineResponse20012);
      });

      it('should have the property challengeCommunity (base name: "challengeCommunity")', function() {
        // TODO: update the code to test the property challengeCommunity
        expect(instance).to.have.property('challengeCommunity');
        // expect(instance.challengeCommunity).to.be(expectedValueLiteral);
      });

      it('should have the property challengeType (base name: "challengeType")', function() {
        // TODO: update the code to test the property challengeType
        expect(instance).to.have.property('challengeType');
        // expect(instance.challengeType).to.be(expectedValueLiteral);
      });

      it('should have the property challengeName (base name: "challengeName")', function() {
        // TODO: update the code to test the property challengeName
        expect(instance).to.have.property('challengeName');
        // expect(instance.challengeName).to.be(expectedValueLiteral);
      });

      it('should have the property challengeId (base name: "challengeId")', function() {
        // TODO: update the code to test the property challengeId
        expect(instance).to.have.property('challengeId');
        // expect(instance.challengeId).to.be(expectedValueLiteral);
      });

      it('should have the property postingDate (base name: "postingDate")', function() {
        // TODO: update the code to test the property postingDate
        expect(instance).to.have.property('postingDate');
        // expect(instance.postingDate).to.be(expectedValueLiteral);
      });

      it('should have the property challengeEndDate (base name: "challengeEndDate")', function() {
        // TODO: update the code to test the property challengeEndDate
        expect(instance).to.have.property('challengeEndDate');
        // expect(instance.challengeEndDate).to.be(expectedValueLiteral);
      });

      it('should have the property registrants (base name: "registrants")', function() {
        // TODO: update the code to test the property registrants
        expect(instance).to.have.property('registrants');
        // expect(instance.registrants).to.be(expectedValueLiteral);
      });

      it('should have the property submissions (base name: "submissions")', function() {
        // TODO: update the code to test the property submissions
        expect(instance).to.have.property('submissions');
        // expect(instance.submissions).to.be(expectedValueLiteral);
      });

      it('should have the property submissionsPassedScreening (base name: "submissionsPassedScreening")', function() {
        // TODO: update the code to test the property submissionsPassedScreening
        expect(instance).to.have.property('submissionsPassedScreening');
        // expect(instance.submissionsPassedScreening).to.be(expectedValueLiteral);
      });

      it('should have the property drPoints (base name: "drPoints")', function() {
        // TODO: update the code to test the property drPoints
        expect(instance).to.have.property('drPoints');
        // expect(instance.drPoints).to.be(expectedValueLiteral);
      });

      it('should have the property submissionsPercentage (base name: "submissionsPercentage")', function() {
        // TODO: update the code to test the property submissionsPercentage
        expect(instance).to.have.property('submissionsPercentage');
        // expect(instance.submissionsPercentage).to.be(expectedValueLiteral);
      });

      it('should have the property averageInitialScore (base name: "averageInitialScore")', function() {
        // TODO: update the code to test the property averageInitialScore
        expect(instance).to.have.property('averageInitialScore');
        // expect(instance.averageInitialScore).to.be(expectedValueLiteral);
      });

      it('should have the property averageFinalScore (base name: "averageFinalScore")', function() {
        // TODO: update the code to test the property averageFinalScore
        expect(instance).to.have.property('averageFinalScore');
        // expect(instance.averageFinalScore).to.be(expectedValueLiteral);
      });

      it('should have the property results (base name: "results")', function() {
        // TODO: update the code to test the property results
        expect(instance).to.have.property('results');
        // expect(instance.results).to.be(expectedValueLiteral);
      });

      it('should have the property finalFixes (base name: "finalFixes")', function() {
        // TODO: update the code to test the property finalFixes
        expect(instance).to.have.property('finalFixes');
        // expect(instance.finalFixes).to.be(expectedValueLiteral);
      });

    });
  });

}));
