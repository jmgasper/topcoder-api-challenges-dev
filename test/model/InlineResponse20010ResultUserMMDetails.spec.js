/*
 * ap-challenge-microservice
 * Services that provide access and interaction with all sorts of challenges, including design, dev, single round matches, and marathon matches. 
 *
 * OpenAPI spec version: 1.0.5
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApChallengeMicroservice);
  }
}(this, function(expect, ApChallengeMicroservice) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InlineResponse20010ResultUserMMDetails', function() {
      beforeEach(function() {
        instance = new ApChallengeMicroservice.InlineResponse20010ResultUserMMDetails();
      });

      it('should create an instance of InlineResponse20010ResultUserMMDetails', function() {
        // TODO: update the code to test InlineResponse20010ResultUserMMDetails
        expect(instance).to.be.a(ApChallengeMicroservice.InlineResponse20010ResultUserMMDetails);
      });

      it('should have the property contestId (base name: "contestId")', function() {
        // TODO: update the code to test the property contestId
        expect(instance).to.have.property('contestId');
        // expect(instance.contestId).to.be(expectedValueLiteral);
      });

      it('should have the property roundId (base name: "roundId")', function() {
        // TODO: update the code to test the property roundId
        expect(instance).to.have.property('roundId');
        // expect(instance.roundId).to.be(expectedValueLiteral);
      });

      it('should have the property oldRating (base name: "oldRating")', function() {
        // TODO: update the code to test the property oldRating
        expect(instance).to.have.property('oldRating');
        // expect(instance.oldRating).to.be(expectedValueLiteral);
      });

      it('should have the property newRating (base name: "newRating")', function() {
        // TODO: update the code to test the property newRating
        expect(instance).to.have.property('newRating');
        // expect(instance.newRating).to.be(expectedValueLiteral);
      });

      it('should have the property rated (base name: "rated")', function() {
        // TODO: update the code to test the property rated
        expect(instance).to.have.property('rated');
        // expect(instance.rated).to.be(expectedValueLiteral);
      });

      it('should have the property pointTotal (base name: "pointTotal")', function() {
        // TODO: update the code to test the property pointTotal
        expect(instance).to.have.property('pointTotal');
        // expect(instance.pointTotal).to.be(expectedValueLiteral);
      });

      it('should have the property ovarallRank (base name: "ovarallRank")', function() {
        // TODO: update the code to test the property ovarallRank
        expect(instance).to.have.property('ovarallRank');
        // expect(instance.ovarallRank).to.be(expectedValueLiteral);
      });

      it('should have the property numSubmissions (base name: "numSubmissions")', function() {
        // TODO: update the code to test the property numSubmissions
        expect(instance).to.have.property('numSubmissions');
        // expect(instance.numSubmissions).to.be(expectedValueLiteral);
      });

    });
  });

}));
