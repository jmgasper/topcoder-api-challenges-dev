/*
 * ap-challenge-microservice
 * Services that provide access and interaction with all sorts of challenges, including design, dev, single round matches, and marathon matches. 
 *
 * OpenAPI spec version: 1.0.5
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApChallengeMicroservice);
  }
}(this, function(expect, ApChallengeMicroservice) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InlineResponse20011ResultContent', function() {
      beforeEach(function() {
        instance = new ApChallengeMicroservice.InlineResponse20011ResultContent();
      });

      it('should create an instance of InlineResponse20011ResultContent', function() {
        // TODO: update the code to test InlineResponse20011ResultContent
        expect(instance).to.be.a(ApChallengeMicroservice.InlineResponse20011ResultContent);
      });

      it('should have the property subTrack (base name: "subTrack")', function() {
        // TODO: update the code to test the property subTrack
        expect(instance).to.have.property('subTrack');
        // expect(instance.subTrack).to.be(expectedValueLiteral);
      });

      it('should have the property challengeTitle (base name: "challengeTitle")', function() {
        // TODO: update the code to test the property challengeTitle
        expect(instance).to.have.property('challengeTitle');
        // expect(instance.challengeTitle).to.be(expectedValueLiteral);
      });

      it('should have the property challengeId (base name: "challengeId")', function() {
        // TODO: update the code to test the property challengeId
        expect(instance).to.have.property('challengeId');
        // expect(instance.challengeId).to.be(expectedValueLiteral);
      });

      it('should have the property projectId (base name: "projectId")', function() {
        // TODO: update the code to test the property projectId
        expect(instance).to.have.property('projectId');
        // expect(instance.projectId).to.be(expectedValueLiteral);
      });

      it('should have the property forumId (base name: "forumId")', function() {
        // TODO: update the code to test the property forumId
        expect(instance).to.have.property('forumId');
        // expect(instance.forumId).to.be(expectedValueLiteral);
      });

      it('should have the property introduction (base name: "introduction")', function() {
        // TODO: update the code to test the property introduction
        expect(instance).to.have.property('introduction');
        // expect(instance.introduction).to.be(expectedValueLiteral);
      });

      it('should have the property detailedRequirements (base name: "detailedRequirements")', function() {
        // TODO: update the code to test the property detailedRequirements
        expect(instance).to.have.property('detailedRequirements');
        // expect(instance.detailedRequirements).to.be(expectedValueLiteral);
      });

      it('should have the property finalSubmissionGuidelines (base name: "finalSubmissionGuidelines")', function() {
        // TODO: update the code to test the property finalSubmissionGuidelines
        expect(instance).to.have.property('finalSubmissionGuidelines');
        // expect(instance.finalSubmissionGuidelines).to.be(expectedValueLiteral);
      });

      it('should have the property screeningScorecardId (base name: "screeningScorecardId")', function() {
        // TODO: update the code to test the property screeningScorecardId
        expect(instance).to.have.property('screeningScorecardId');
        // expect(instance.screeningScorecardId).to.be(expectedValueLiteral);
      });

      it('should have the property reviewScorecardId (base name: "reviewScorecardId")', function() {
        // TODO: update the code to test the property reviewScorecardId
        expect(instance).to.have.property('reviewScorecardId');
        // expect(instance.reviewScorecardId).to.be(expectedValueLiteral);
      });

      it('should have the property cmcTaskId (base name: "cmcTaskId")', function() {
        // TODO: update the code to test the property cmcTaskId
        expect(instance).to.have.property('cmcTaskId');
        // expect(instance.cmcTaskId).to.be(expectedValueLiteral);
      });

      it('should have the property numberOfCheckpointsPrizes (base name: "numberOfCheckpointsPrizes")', function() {
        // TODO: update the code to test the property numberOfCheckpointsPrizes
        expect(instance).to.have.property('numberOfCheckpointsPrizes');
        // expect(instance.numberOfCheckpointsPrizes).to.be(expectedValueLiteral);
      });

      it('should have the property topCheckPointPrize (base name: "topCheckPointPrize")', function() {
        // TODO: update the code to test the property topCheckPointPrize
        expect(instance).to.have.property('topCheckPointPrize');
        // expect(instance.topCheckPointPrize).to.be(expectedValueLiteral);
      });

      it('should have the property postingDate (base name: "postingDate")', function() {
        // TODO: update the code to test the property postingDate
        expect(instance).to.have.property('postingDate');
        // expect(instance.postingDate).to.be(expectedValueLiteral);
      });

      it('should have the property registrationEndDate (base name: "registrationEndDate")', function() {
        // TODO: update the code to test the property registrationEndDate
        expect(instance).to.have.property('registrationEndDate');
        // expect(instance.registrationEndDate).to.be(expectedValueLiteral);
      });

      it('should have the property checkpointSubmissionEndDate (base name: "checkpointSubmissionEndDate")', function() {
        // TODO: update the code to test the property checkpointSubmissionEndDate
        expect(instance).to.have.property('checkpointSubmissionEndDate');
        // expect(instance.checkpointSubmissionEndDate).to.be(expectedValueLiteral);
      });

      it('should have the property submissionEndDate (base name: "submissionEndDate")', function() {
        // TODO: update the code to test the property submissionEndDate
        expect(instance).to.have.property('submissionEndDate');
        // expect(instance.submissionEndDate).to.be(expectedValueLiteral);
      });

      it('should have the property submissionsViewable (base name: "submissionsViewable")', function() {
        // TODO: update the code to test the property submissionsViewable
        expect(instance).to.have.property('submissionsViewable');
        // expect(instance.submissionsViewable).to.be(expectedValueLiteral);
      });

      it('should have the property reviewType (base name: "reviewType")', function() {
        // TODO: update the code to test the property reviewType
        expect(instance).to.have.property('reviewType');
        // expect(instance.reviewType).to.be(expectedValueLiteral);
      });

      it('should have the property environment (base name: "environment")', function() {
        // TODO: update the code to test the property environment
        expect(instance).to.have.property('environment');
        // expect(instance.environment).to.be(expectedValueLiteral);
      });

      it('should have the property codeRepo (base name: "codeRepo")', function() {
        // TODO: update the code to test the property codeRepo
        expect(instance).to.have.property('codeRepo');
        // expect(instance.codeRepo).to.be(expectedValueLiteral);
      });

      it('should have the property allowStockArt (base name: "allowStockArt")', function() {
        // TODO: update the code to test the property allowStockArt
        expect(instance).to.have.property('allowStockArt');
        // expect(instance.allowStockArt).to.be(expectedValueLiteral);
      });

      it('should have the property filetypes (base name: "filetypes")', function() {
        // TODO: update the code to test the property filetypes
        expect(instance).to.have.property('filetypes');
        // expect(instance.filetypes).to.be(expectedValueLiteral);
      });

      it('should have the property forumLink (base name: "forumLink")', function() {
        // TODO: update the code to test the property forumLink
        expect(instance).to.have.property('forumLink');
        // expect(instance.forumLink).to.be(expectedValueLiteral);
      });

      it('should have the property appealsEndDate (base name: "appealsEndDate")', function() {
        // TODO: update the code to test the property appealsEndDate
        expect(instance).to.have.property('appealsEndDate');
        // expect(instance.appealsEndDate).to.be(expectedValueLiteral);
      });

      it('should have the property finalFixEndDate (base name: "finalFixEndDate")', function() {
        // TODO: update the code to test the property finalFixEndDate
        expect(instance).to.have.property('finalFixEndDate');
        // expect(instance.finalFixEndDate).to.be(expectedValueLiteral);
      });

      it('should have the property submissionLimit (base name: "submissionLimit")', function() {
        // TODO: update the code to test the property submissionLimit
        expect(instance).to.have.property('submissionLimit');
        // expect(instance.submissionLimit).to.be(expectedValueLiteral);
      });

      it('should have the property currentStatus (base name: "currentStatus")', function() {
        // TODO: update the code to test the property currentStatus
        expect(instance).to.have.property('currentStatus');
        // expect(instance.currentStatus).to.be(expectedValueLiteral);
      });

      it('should have the property drPoints (base name: "drPoints")', function() {
        // TODO: update the code to test the property drPoints
        expect(instance).to.have.property('drPoints');
        // expect(instance.drPoints).to.be(expectedValueLiteral);
      });

      it('should have the property reliabilityBonus (base name: "reliabilityBonus")', function() {
        // TODO: update the code to test the property reliabilityBonus
        expect(instance).to.have.property('reliabilityBonus');
        // expect(instance.reliabilityBonus).to.be(expectedValueLiteral);
      });

      it('should have the property challengeCommunity (base name: "challengeCommunity")', function() {
        // TODO: update the code to test the property challengeCommunity
        expect(instance).to.have.property('challengeCommunity');
        // expect(instance.challengeCommunity).to.be(expectedValueLiteral);
      });

      it('should have the property directUrl (base name: "directUrl")', function() {
        // TODO: update the code to test the property directUrl
        expect(instance).to.have.property('directUrl');
        // expect(instance.directUrl).to.be(expectedValueLiteral);
      });

      it('should have the property technologies (base name: "technologies")', function() {
        // TODO: update the code to test the property technologies
        expect(instance).to.have.property('technologies');
        // expect(instance.technologies).to.be(expectedValueLiteral);
      });

      it('should have the property prizes (base name: "prizes")', function() {
        // TODO: update the code to test the property prizes
        expect(instance).to.have.property('prizes');
        // expect(instance.prizes).to.be(expectedValueLiteral);
      });

      it('should have the property winners (base name: "winners")', function() {
        // TODO: update the code to test the property winners
        expect(instance).to.have.property('winners');
        // expect(instance.winners).to.be(expectedValueLiteral);
      });

      it('should have the property currentPhaseName (base name: "currentPhaseName")', function() {
        // TODO: update the code to test the property currentPhaseName
        expect(instance).to.have.property('currentPhaseName');
        // expect(instance.currentPhaseName).to.be(expectedValueLiteral);
      });

      it('should have the property currentPhaseRemainingTime (base name: "currentPhaseRemainingTime")', function() {
        // TODO: update the code to test the property currentPhaseRemainingTime
        expect(instance).to.have.property('currentPhaseRemainingTime');
        // expect(instance.currentPhaseRemainingTime).to.be(expectedValueLiteral);
      });

      it('should have the property currentPhaseEndDate (base name: "currentPhaseEndDate")', function() {
        // TODO: update the code to test the property currentPhaseEndDate
        expect(instance).to.have.property('currentPhaseEndDate');
        // expect(instance.currentPhaseEndDate).to.be(expectedValueLiteral);
      });

      it('should have the property documents (base name: "documents")', function() {
        // TODO: update the code to test the property documents
        expect(instance).to.have.property('documents');
        // expect(instance.documents).to.be(expectedValueLiteral);
      });

      it('should have the property platforms (base name: "platforms")', function() {
        // TODO: update the code to test the property platforms
        expect(instance).to.have.property('platforms');
        // expect(instance.platforms).to.be(expectedValueLiteral);
      });

      it('should have the property event (base name: "event")', function() {
        // TODO: update the code to test the property event
        expect(instance).to.have.property('event');
        // expect(instance.event).to.be(expectedValueLiteral);
      });

      it('should have the property registrants (base name: "registrants")', function() {
        // TODO: update the code to test the property registrants
        expect(instance).to.have.property('registrants');
        // expect(instance.registrants).to.be(expectedValueLiteral);
      });

      it('should have the property phases (base name: "phases")', function() {
        // TODO: update the code to test the property phases
        expect(instance).to.have.property('phases');
        // expect(instance.phases).to.be(expectedValueLiteral);
      });

      it('should have the property terms (base name: "terms")', function() {
        // TODO: update the code to test the property terms
        expect(instance).to.have.property('terms');
        // expect(instance.terms).to.be(expectedValueLiteral);
      });

      it('should have the property submissions (base name: "submissions")', function() {
        // TODO: update the code to test the property submissions
        expect(instance).to.have.property('submissions');
        // expect(instance.submissions).to.be(expectedValueLiteral);
      });

      it('should have the property checkpoints (base name: "checkpoints")', function() {
        // TODO: update the code to test the property checkpoints
        expect(instance).to.have.property('checkpoints');
        // expect(instance.checkpoints).to.be(expectedValueLiteral);
      });

      it('should have the property numberOfRegistrants (base name: "numberOfRegistrants")', function() {
        // TODO: update the code to test the property numberOfRegistrants
        expect(instance).to.have.property('numberOfRegistrants');
        // expect(instance.numberOfRegistrants).to.be(expectedValueLiteral);
      });

      it('should have the property numberOfSubmissions (base name: "numberOfSubmissions")', function() {
        // TODO: update the code to test the property numberOfSubmissions
        expect(instance).to.have.property('numberOfSubmissions');
        // expect(instance.numberOfSubmissions).to.be(expectedValueLiteral);
      });

      it('should have the property numberOfSubmitters (base name: "numberOfSubmitters")', function() {
        // TODO: update the code to test the property numberOfSubmitters
        expect(instance).to.have.property('numberOfSubmitters');
        // expect(instance.numberOfSubmitters).to.be(expectedValueLiteral);
      });

      it('should have the property numberOfCheckpointSubmissions (base name: "numberOfCheckpointSubmissions")', function() {
        // TODO: update the code to test the property numberOfCheckpointSubmissions
        expect(instance).to.have.property('numberOfCheckpointSubmissions');
        // expect(instance.numberOfCheckpointSubmissions).to.be(expectedValueLiteral);
      });

      it('should have the property pointPrizes (base name: "pointPrizes")', function() {
        // TODO: update the code to test the property pointPrizes
        expect(instance).to.have.property('pointPrizes');
        // expect(instance.pointPrizes).to.be(expectedValueLiteral);
      });

    });
  });

}));
